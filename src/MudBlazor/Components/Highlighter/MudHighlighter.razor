@namespace MudBlazor
@inherits MudComponentBase

@using System.Text.RegularExpressions
@using static MudBlazor.Components.Highlighter.Splitter

@foreach (var fragment in fragments)
{
    if (!string.IsNullOrWhiteSpace(HighlightedText)
        && Regex.IsMatch(fragment,
           Regex.Escape(HighlightedText), //escape until add a property to accept regex
            CaseSensitive
                ? RegexOptions.None
                : RegexOptions.IgnoreCase))
    {
        <mark class="@Class" style="@Style" @attributes="@UserAttributes"> @fragment </mark>
    }
    else
    {
        @fragment
    }
}

@code {
    private MudHighlighterContext _context;

    /// <summary>
    /// The whole text in which a fragment will be highlighted
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public string Text { get; set; }

    /// <summary>
    /// The fragment of text to be highlighted
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public string HighlightedText { get; set; }

    /// <summary>
    /// The fragments of text to be highlighted
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public IEnumerable<string> HighlightedTexts { get; set; }

    /// <summary>
    /// Whether or not the highlighted text is case sensitive
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public bool CaseSensitive { get; set; }

    /// <summary>
    /// If true, highlights the text until the next regex boundary
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public bool UntilNextBoundary { get; set; }

    /// <summary>
    /// If true, treats HighlightedText/HighlightedTexts as regex search patterns
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public bool IsRegex { get; set; }

    [Parameter]
    [Category(CategoryTypes.Highlighter.Behavior)]
    public Regex Regex { get; set; }

    protected override void OnParametersSet()
    {
        _context = MudHighlighterContext.Build
        (
            Text,
            highlightedText: HighlightedText,
            highlightedTexts: HighlightedTexts,
            isRegex: IsRegex,
            regex: Regex,
            isCaseSensitive: CaseSensitive,
            untilNextBoundary: UntilNextBoundary
        );
    }
}